const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const commandLineArgs = require('command-line-args');
const { EOL } = require('os');
const cmdOptions = commandLineArgs([
  {
    name: 'secret',
    alias: 's',
  }, {
    name: 'config',
    alias: 'c',
  },
]);
// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Tools like Cloud9 rely on this.
const HOST = process.env.HOST || '0.0.0.0';
const DEFAULT_PORT = 3000;

// Set the extension secret as an environment variable if it was passed in via command line args
if (cmdOptions.secret) {
  process.env.EXT_SECRET = cmdOptions.secret;
}

if (cmdOptions.config) {
  const configFileLocation = path.resolve(process.cwd(), cmdOptions.config);
  try {
    const configFile = fs.readFileSync(configFileLocation, 'utf-8');
    // Pull config variables from file and set them to environment variables
    const { clientID, version } = JSON.parse(configFile);
    if (clientID) { process.env.EXT_CLIENT_ID = clientID; }
    if (version) { process.env.EXT_VERSION = version; }
  } catch (e) {
    console.log(e);
    console.log();
    console.log(
      chalk.red(
        `Unable to read config file at location: ${chalk.yellow(
          chalk.bold(configFileLocation)
        )}. Falling back to environment variables.`
      )
    );
  }
}

// Check for a newer release if this isn't a clone.
if (fs.existsSync('.release')) {
  process.env.GIT_RELEASE = fs.readFileSync('.release', 'utf8').trim();
}

if (process.argv.length > 2) {
  console.log('clientId:', process.env.EXT_CLIENT_ID);
  console.log('version:', process.env.EXT_VERSION);
  console.log('secret:', process.env.EXT_SECRET);
}

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');

const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndex])) {
  process.exit(1);
}

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Binding to HOST environment variable and DEFAULT_PORT:${EOL}${chalk.yellow(
        chalk.bold(`${process.env.HOST}:${DEFAULT_PORT}`)
      )}`
    )
  );
}

// Create a call-back to configure the WebPack application.
function configureApp(app) {
  require('./project')(app);
}

const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
const appName = require(paths.appPackageJson).name;
const urls = prepareUrls(protocol, HOST, DEFAULT_PORT);
// Create a webpack compiler that is configured with custom messages.
const compiler = createCompiler(webpack, config, appName, urls, useYarn);
// Load proxy config
const proxySetting = require(paths.appPackageJson).proxy;
const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
// Serve webpack assets generated by the compiler over a web sever.
const serverConfig = createDevServerConfig(
  proxyConfig,
  urls.lanUrlForConfig,
  configureApp
);
const devServer = new WebpackDevServer(compiler, serverConfig);
// Launch WebpackDevServer.
devServer.listen(DEFAULT_PORT, HOST, err => {
  if (err) {
    return console.log(err);
  }
  console.log(chalk.cyan('Starting the development server...'));
  openBrowser(urls.localUrlForBrowser);
});

['SIGINT', 'SIGTERM'].forEach(function(sig) {
  process.on(sig, function() {
    devServer.close();
    process.exit();
  });
});
